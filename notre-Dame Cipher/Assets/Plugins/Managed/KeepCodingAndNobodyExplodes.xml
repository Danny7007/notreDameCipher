<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeepCodingAndNobodyExplodes</name>
    </assembly>
    <members>
        <member name="T:KeepCodingAndNobodyExplodes.ArrayHelper">
            <summary>
            Extension methods surrounding <see cref="T:System.Array"/> static methods to make code a bit shorter. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.AsReadOnly``1(``0[])">
            <summary>
            Returns a read-only wrapper for the specified array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.asreadonly?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper.</param>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the specified array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch(System.Array,System.Object)">
            <summary>
            Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable"/> interface implemented by each element of the array and by the specified object.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional Array to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Object_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable"/> interface implemented by each element of the array and by the specified value.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element..</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch``1(``0[],``0)">
            <summary>
            Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1"/> generic interface implemented by each element of the <see cref="T:System.Array"/> and by the specified object.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0_____0_"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0_____0_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable`1"/> implementation of each element.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1"/> generic interface implemented by each element of the <see cref="T:System.Array"/> and by the specified value.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable`1"/> implementation of each element.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Sets a range of elements in an array to the default value of each element type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.clear?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.constrainedcopy?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray"/> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts an array of one type to an array of another type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.convertall?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> that converts each element from one type to another type.</param>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Int64_System_Array_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationIndex"/> at which storing begins.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationIndex"/> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copies a range of elements from an Array starting at the first element and pastes them into another Array starting at the first element. The length is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Array_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the first element and pastes them into another <see cref="T:System.Array"/> starting at the first element. The length is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int32)">
            <summary>
            Creates a one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and length, with zero-based indexing.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length">The size of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int32[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
            </summary>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int64[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array"/> to create. Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a two-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length1">The size of the first dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length2">The size of the second dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new two-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int32[],System.Int32[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with the specified lower bounds.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32___System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length and lower bound for each dimension.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a three-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length1">The size of the first dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length2">The size of the second dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length3">The size of the third dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new three-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Exists``1(``0[],System.Predicate{``0})">
            <summary>
            Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.exists?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the elements to search for.</param>
            <returns><c>true</c> if <paramref name="array"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.find?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="match">The predicate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findall?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the elements to search for.</param>
            <returns>An <see cref="T:System.Array"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"/> that extends from the specified index to the last element.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findindex?view=net-5.0#System_Array_FindIndex__1___0___System_Int32_System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.findindex?view=net-5.0#System_Array_FindIndex__1___0___System_Int32_System_Int32_System_Predicate___0__</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <see cref="T:System.Predicate`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlast?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array"/> that extends from the specified index to the last element.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Int32_System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Int32_System_Int32_System_Predicate___0__</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <see cref="T:System.Predicate`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified action on each element of the specified array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.foreach?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> on whose elements the action is to be performed.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to perform on each element of <paramref name="array"/>.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> in <paramref name="array"/>, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the first occurrence of <paramref name="value"/>, if it's found, within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the first occurrence of <paramref name="value"/>, if it's found in the <paramref name="array"/> from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + <paramref name="count"/> - 1; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> in the entire <paramref name="array"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.IndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of its last occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The index of the last occurrence of <paramref name="value"/> in <paramref name="array"/>, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its last occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the last occurrence of <paramref name="value"/>, if it's found, within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs last occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the last occurrence of <paramref name="value"/>, if it's found in the <paramref name="array"/> from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + <paramref name="count"/> - 1; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its last occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of its last occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> in the entire <paramref name="array"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its last occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Resize``1(``0[],System.Int32)">
            <summary>
            Changes the number of elements of a one-dimensional array to the specified new size.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.resize?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to resize, or <c>null</c> to create a new array with the specified size.</param>
            <param name="newSize">The size of the new array.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of a subset of the elements in the one-dimensional <see cref="T:System.Array"/>.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse_System_Array_System_Int32_System_Int32_</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Reverse(System.Array)">
            <summary>
            Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Reverse``1(``0[])">
            <summary>
            Reverses the sequence of the elements in the one-dimensional generic array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse__1___0___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">The one-dimensional array of elements to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Reverse``1(``0[],System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of a subset of the elements in the one-dimensional generic array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse__1___0___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">The one-dimensional array of elements to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Int32_System_Int32_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each key.
            </summary>
            <remarks><seealso href=""/>https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a one-dimensional <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional array to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array,System.Array)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort(System.Array)">
            <summary>
            Sorts the elements in an entire one-dimensional <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``1(``0[])">
            <summary>
            Sorts the elements in an entire <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based Array to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="comparer">The <see cref="T:System.IComparable`1"/> generic interface implementation to use when comparing elements, or <c>null</c> to use the <see cref="T:System.IComparable`1"/> generic interface implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Comparison___0__"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``2(``0[],``1[])">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="comparer">The <see cref="T:System.IComparable`1"/> generic interface implementation to use when comparing elements, or <c>null</c> to use the <see cref="T:System.IComparable`1"/> generic interface implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
            Determines whether every element in the array matches the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.trueforall?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to check against the conditions.</param>
            <param name="match">The predicate that defines the conditions to check against the elements.</param>
            <returns><c>true</c> if every element in <paramref name="array"/> matches the conditions defined by the specified predicate; otherwise, <c>false</c>. If there are no elements in the array, the return value is <c>true</c>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Clone(System.Array)">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Array"/>
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.clone?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns>A shallow copy of the <paramref name="this"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CopyTo(System.Array,System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copyto?view=net-5.0#System_Array_CopyTo_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="this"><c>this</c></param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">A 32-bit integer that represents the index in <paramref name="array"/> at which copying begins.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.CopyTo(System.Array,System.Array,System.Int64)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copyto?view=net-5.0#System_Array_CopyTo_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="this"><c>this</c></param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">A 64-bit integer that represents the index in <paramref name="array"/> at which copying begins.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetEnumerator(System.Array)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getenumerator?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the Array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetLength(System.Array,System.Int32)">
            <summary>
            Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlength?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose length needs to be determined.</param>
            <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetLongLength(System.Array,System.Int32)">
            <summary>
            Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlonglength?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose length needs to be determined.</param>
            <returns>A 64-bit integer that represents the number of elements in the specified dimension.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetLowerBound(System.Array,System.Int32)">
            <summary>
            Gets the index of the first element of the specified dimension in the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlowerbound?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
            <returns>The index of the first element of the specified dimension in the array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetUpperBound(System.Array,System.Int32)">
            <summary>
            Gets the index of the last element of the specified dimension in the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getupperbound?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
            <returns>The index of the first element of the specified dimension in the array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int64,System.Int64,System.Int64)">
            <summary>
            Gets the value at the specified position in the three-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified position in the three-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.GetValue(System.Array,System.Int64,System.Int64)">
            <summary>
            Gets the value at the specified position in the two-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified position in the two-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int32)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int64)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int32[])">
            <summary>
            Gets the value at the specified position in the multidimensional <see cref="T:System.Array"/>. The indexes are specified as an array of 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the Array element to get.</param>
            <returns>The value at the specified position in the multidimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Get(System.Array,System.Int64[])">
            <summary>
            Gets the value at the specified position in the multidimensional <see cref="T:System.Array"/>. The indexes are specified as an array of 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the Array element to get.</param>
            <returns>The value at the specified position in the multidimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Initialize(System.Array)">
            <summary>
            Initializes every element of the value-type <see cref="T:System.Array"/> by calling the parameterless constructor of the value type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.initialize?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int32[])">
            <summary>
            Sets a value to the element at the specified position in the multi-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int64[])">
            <summary>
            Sets a value to the element at the specified position in the multi-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the two-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int64,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the two-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the three-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ArrayHelper.Set(System.Array,System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the three-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.BigInteger">
            <summary>
            Stores numbers far larger than long or ulong by using arrays to store the values. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.#ctor(System.Object)">
            <summary>
            Creates a big integer containing the number specified.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedValueException"></exception>
            <param name="value">The value to store. <see cref="T:System.Array"/>, <see cref="T:System.String"/>, and any number-type are compatible.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.#ctor">
            <summary>
            Creates a big integer with the default value. (0)
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.Item(System.Int32)">
            <summary>
            Indexable number. Allows you to treat the value as an array.
            </summary>
            <param name="i">The <paramref name="i"/>th digit to look from. (left-to-right)</param>
            <returns>The current value's <paramref name="i"/>th digit. (left-to-right)</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.IsNegative">
            <value>
            Whether or not the number is negative.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.Length">
            <value>
            The amount of digits of the value.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.GetLowerBound">
            <value>
            The first digit's index.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.GetUpperBound">
            <value>
            The last digit's index.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.Value">
            <summary>
            The number itself. The instance is duplicated so that the original BigInteger's value may not be modified directly.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.Zero">
            <value>
            BigInteger with value zero. (Default value)
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.BigInteger.One">
            <value>
            BigInteger with value one.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Equality(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Equals operator; determines if both integers contain the same value.
            </summary>
            <param name="bigIntegerA">The left-hand side operator</param>
            <param name="bigIntegerB">The right-hand side operator.</param>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Equality(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Equals operator; determines if both integers contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <param name="bigInteger">The left-hand side operator</param>
            <param name="value">The right-hand side operator.</param>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Equality(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Equals operator; determines if both integers contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Inequality(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value.
            </summary>
            <param name="bigIntegerA">The left-hand side operator</param>
            <param name="bigIntegerB">The right-hand side operator.</param>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Inequality(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <param name="bigInteger">The left-hand side operator</param>
            <param name="value">The right-hand side operator.</param>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Inequality(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <param name="value">The left-hand side operator</param>
            <param name="bigInteger">The right-hand side operator.</param>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThan(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is more than <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThan(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>True if <paramref name="bigInteger"/> is more than <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThan(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>True if <paramref name="value"/> is more than <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThan(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is less than <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThan(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>True if <paramref name="bigInteger"/> is less than <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThan(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>True if <paramref name="value"/> is less than <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThanOrEqual(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is more than or equal <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThanOrEqual(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>True if <paramref name="bigInteger"/> is more than or equal <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_GreaterThanOrEqual(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>True if <paramref name="value"/> is more than or equal <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThanOrEqual(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is less than or equal <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThanOrEqual(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>True if <paramref name="bigInteger"/> is less than or equal <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_LessThanOrEqual(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>True if <paramref name="value"/> is less than or equal <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Addition(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Add operator; gets the sum of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Addition(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Add operator; gets the sum of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Addition(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Addition operator; gets the sum of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Subtraction(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Subtraction(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Subtraction(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Multiply(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Multiply(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Multiply(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Division(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Division(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Division(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Modulus(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Modulus(KeepCodingAndNobodyExplodes.BigInteger,System.Object)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Modulus(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Explicit(KeepCodingAndNobodyExplodes.BigInteger)~System.Int32">
            <summary>
            Converts the <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Implicit(System.Int32)~KeepCodingAndNobodyExplodes.BigInteger">
            <summary>
            Converts the <see cref="T:System.Int32"/> to a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="value">The value to convert into <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.</param>
            <returns><see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Explicit(KeepCodingAndNobodyExplodes.BigInteger)~System.Int64">
            <summary>
            Converts the <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Implicit(System.Int64)~KeepCodingAndNobodyExplodes.BigInteger">
            <summary>
            Converts the <see cref="T:System.Int64"/> to a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="value">The value to convert into <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.</param>
            <returns><see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Explicit(KeepCodingAndNobodyExplodes.BigInteger)~System.UInt32">
            <summary>
            Converts the <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to a <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Implicit(System.UInt32)~KeepCodingAndNobodyExplodes.BigInteger">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="value">The value to convert into <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.</param>
            <returns><see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Explicit(KeepCodingAndNobodyExplodes.BigInteger)~System.UInt64">
            <summary>
            Converts the <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to a <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.op_Implicit(System.UInt64)~KeepCodingAndNobodyExplodes.BigInteger">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to a <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="value">The value to convert into <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/>.</param>
            <returns><see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.GetHashCode">
            <summary>
            Gets the hash code of the current values.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.Equals(System.Object)">
            <summary>
            Determins if both values are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both values are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.ToString">
            <summary>
            Converts the current array it stores as a string.
            </summary>
            <returns>The value of itself.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.Equals(KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Determins if both values are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if both values are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.IsInRange(KeepCodingAndNobodyExplodes.BigInteger,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Determines if it is between 2 other <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> variables. Equality will count as true.
            </summary>
            <param name="min">The minimum value accepted.</param>
            <param name="max">The maximum value accepted.</param>
            <returns>True if <paramref name="min"/> is smaller or equal itself and <paramref name="max"/> is greater or equal itself.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.IsInRange(System.Object,System.Object)">
            <summary>
            Determines if it is between 2 other variables. Equality will count as true.
            </summary>
            <param name="min">The minimum value accepted.</param>
            <param name="max">The maximum value accepted.</param>
            <returns>True if <paramref name="min"/> is smaller or equal itself and <paramref name="max"/> is greater or equal itself.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.ToInt">
            <summary>
            Converts the BigInteger to a <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.ToLong">
            <summary>
            Converts the BigInteger to a <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.ToUInt">
            <summary>
            Converts the BigInteger to a <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.ToULong">
            <summary>
            Converts the BigInteger to a <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.Clone">
            <summary>
            Makes a new instance/deep clone of <see cref="T:KeepCodingAndNobodyExplodes.BigInteger"/> with the same value.
            </summary>
            <returns>A deep clone of itself.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.Modulo(KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="bigInteger">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.BigInteger.Modulo(System.Object)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <exception cref="T:System.DivideByZeroException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.NegativeNumberException"></exception>
            <param name="obj">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="obj"/>.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.EventHelper">
            <summary>
            KMFramework extension methods that makes it easier to assign multiple events to a variable in one statement. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Assign(KMSelectable[],System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="kmSelectable"/>. Reassigning them will replace their values. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:KeepCodingAndNobodyExplodes.NullIteratorException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="kmSelectable">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="onCancel">Called when player backs out of this selectable.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on. This will not work correctly in Virtual Reality.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off. This will not work correctly in Virtual Reality.</param>
            <param name="onInteract">Called when player interacts with the selctable.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="overrideBoolean">Return true will make it act as a module/submodule, and false as a button.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Assign(KMSelectable,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Nullable{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="kmSelectable"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="kmSelectable">The KMSelectable array to add events to.</param>
            <param name="onCancel">Called when player backs out of this selectable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on. This will not work correctly in Virtual Reality.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off. This will not work correctly in Virtual Reality.</param>
            <param name="onInteract">Called when player interacts with the selctable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="overrideBoolean">Return true will make it act as a module/submodule, and false as a button.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Assign(KMGameInfo,System.Action{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="kmGameInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <param name="kmGameInfo">The game info instance to assign events to.</param>
            <param name="onAlarmClockChange">Called when the alarm clock changes state, and passes in whether it's on or off.</param>
            <param name="onLightsChange">Called when the lights change state, and passes in whether it's on or off.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Assign(KMBombInfo,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="kmBombInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="kmBombInfo">The bomb info instance to assign events to.</param>
            <param name="onBombExploded">Called when the bomb explodes.</param>
            <param name="onBombSolved">Called when the bomb is defused.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Cast``1(System.Delegate)">
            <summary>
            Casts a <see cref="T:System.Delegate"/> onto the type <typeparamref name="T"/>.
            </summary>
            <remarks>
            Both types must have the same parameter and return types, and the <paramref name="dele"/> argument cannot have its <see cref="P:System.Delegate.Target"/> or <see cref="P:System.Delegate.Method"/> be null.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type to cast the delegate into.</typeparam>
            <param name="dele">The delegate to cast.</param>
            <returns><paramref name="dele"/> as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EventHelper.Set``1(System.Delegate,``0@)">
            <summary>
            Adds a <see cref="T:System.Delegate"/> onto the referenced variable.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the <paramref name="mutator"/> and <see cref="T:System.Delegate"/> casting.</typeparam>
            <param name="dele">The <see cref="T:System.Delegate"/> to add.</param>
            <param name="mutator">The variable that transmutates and adds <paramref name="dele"/> onto itself.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.ConstructorArgumentException">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ConstructorArgumentException.#ctor">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ConstructorArgumentException.#ctor(System.String)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ConstructorArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.EmptyIteratorException">
            <summary>
            An exception thrown when the iterator is empty. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EmptyIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EmptyIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.EmptyIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.NegativeNumberException">
            <summary>
            An exception thrown when the number is unexpectedly negative. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NegativeNumberException.#ctor">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NegativeNumberException.#ctor(System.String)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NegativeNumberException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.NullIteratorException">
            <summary>
            An exception thrown when the iterator is null. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NullIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NullIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.NullIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException">
            <summary>
            An exception for when Unity searches for a component but is unable to find said component. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException.#ctor">
            <summary>
            An exception for when Unity searches for a component but is unable to find said component.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException.#ctor(System.String)">
            <summary>
            An exception for when Unity searches for a component but is unable to find said component.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            An exception for when Unity searches for a component but is unable to find said component.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException">
            <summary>
            An exception thrown for when the type isn't handled. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedTypeException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedTypeException.#ctor(System.String)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.UnrecognizedValueException">
            <summary>
            An exception thrown for when the value isn't handled. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedValueException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedValueException.#ctor(System.String)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.UnrecognizedValueException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.WrongDatatypeException">
            <summary>
            An exception thrown for when the wrong datatype is used. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WrongDatatypeException.#ctor">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WrongDatatypeException.#ctor(System.String)">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WrongDatatypeException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Helper">
            <summary>
            General extension class covering both KMFramework and native datatypes. Written by Emik.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.Helper.Flags">
            <summary>
            Contains the most commonly used flags, use this as a "catch-all" expression.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.Helper.Alphanumeric">
            <summary>
            The entire alphanumeric series, also known as base-62. From 0-9, A-Z, a-z.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.Helper.Decimal">
            <summary>
            The entire decimal series, also known as base-10. From 0-9.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.Helper.Binary">
            <summary>
            The entire binary series, also known as base-2. From 0-1.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.AssertNotNullOrEmpty(System.Array,System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.Array"/> is null or empty.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.NullIteratorException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <param name="array">The <see cref="T:System.Array"/> to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.String"/> is null or empty.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.NullIteratorException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <param name="str">The string to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.BaseToLong(System.String,System.String)">
            <summary>
            Converts any base number to base-10.
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion from the base number, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.LongToBase(System.Int64,System.String)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion to the base number, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.NameOfVariable(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Returns the name of a variable.
            </summary>
            <param name="e">The <see cref="T:System.Linq.Expressions.Expression"/> which returns the object you want the name of.</param>
            <returns>The name of the variable, or if it cannot find it, <see cref="F:KeepCodingAndNobodyExplodes.Helper.Unknown"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Unwrap(System.Object,System.Boolean)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or any other data.
            </summary>
            <param name="item">The object to unwrap.</param>
            <param name="getVariables">Whether it should search inside the variable and yield return the elements inside <paramref name="item"/>.</param>
            <returns>An <see cref="T:System.Object"/> <see cref="T:System.Array"/> of all elements within <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.GetAllValues(System.Object)">
            <summary>
            Gets all fields and properties of the item using reflection.
            </summary>
            <param name="item">The item to get all fields and properties.</param>
            <returns>All fields and properties of <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.SetOrReplace``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Func{System.Int32,System.Int32})">
            <summary>
            Sets or replaces the value of a dictionary with a given function.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">Type of the key of the dictionary.</typeparam>
            <param name="source">Dictionary to operate on.</param>
            <param name="key">Key at which the list is located in the dictionary.</param>
            <param name="func">The function that returns the new value.</param>
            <returns>The new value at the specified key.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Call``1(``0,System.Action{``0})">
            <summary>
            Invokes a method of <typeparamref name="T"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="T">The type of <paramref name="item"/> and <paramref name="action"/>.</typeparam>
            <param name="item">The item to use as reference and modify.</param>
            <param name="action">The action to apply it to.</param>
            <returns>The item <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Call``1(``0[],System.Action{``0,System.Int32})">
            <summary>
            Invokes a method of <typeparamref name="T"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="T">The type of <paramref name="items"/> and <paramref name="action"/>.</typeparam>
            <param name="items">The item to use as reference and modify.</param>
            <param name="action">The action to apply it to.</param>
            <returns>The item <paramref name="items"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.FirstValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Returns the first element which doesn't return null, or null if all of them return null.
            </summary>
            <typeparam name="T">The type of array, and method.</typeparam>
            <param name="source">The array to iterate on.</param>
            <param name="func">The method which returns</param>
            <returns>The first value from <paramref name="source"/> where <paramref name="func"/> doesn't return null, or null.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.LastValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Returns the last element which doesn't return null, or null if all of them return null.
            </summary>
            <typeparam name="T">The type of array, and method.</typeparam>
            <param name="source">The array to iterate on.</param>
            <param name="func">The method which returns</param>
            <returns>The last value from <paramref name="source"/> where <paramref name="func"/> doesn't return null, or null.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ElementAtWrap``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element of an array, pretending that the array wraps around or is circular.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.NullIteratorException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="source">The array itself.</param>
            <param name="i">The index, which will wrap around if it's larger than the array.</param>
            <returns>The element in <paramref name="source"/> using <paramref name="i"/> with rem-euclid modulo.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Backwards``1(System.Collections.Generic.List{``0})">
            <summary>
            Reverses a list and returns the new list.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.NullIteratorException"></exception>
            <typeparam name="T">The type of the list.</typeparam>
            <param name="source">The list to reverse.</param>
            <returns><paramref name="source"/> with the elements reversed.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Replaces an index in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> and returns the new one.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="source">The initial source.</param>
            <param name="index">The index to change.</param>
            <param name="value">The value to replace at <paramref name="source"/>'s <paramref name="index"/> element.</param>
            <returns><paramref name="source"/> but the <paramref name="index"/> element is <paramref name="value"/> instead.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToIEnumerable(System.Collections.IEnumerator)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="enumerator">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="enumerator"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToIEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The parameter and return type.</typeparam>
            <param name="enumerator">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="enumerator"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a slice of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="source"/> and return type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to take a slice of.</param>
            <param name="start">The starting index of the slice.</param>
            <param name="count">The amount of items to take.</param>
            <returns>A slice of <paramref name="source"/> based on <paramref name="start"/> and <paramref name="count"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the method info from an expression.
            </summary>
            <typeparam name="T">The type of the action.</typeparam>
            <param name="expression">The expression that retrieves the method.</param>
            <returns>The method info of the function.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.HasComponent``1(UnityEngine.GameObject)">
            <summary>
            Determines if the current game object has a component of a specific type.
            </summary>
            <remarks>
            This uses <see cref="M:UnityEngine.GameObject.GetComponent``1"/>, meaning that the component must be part of the same game object for this to return true.
            </remarks>
            <typeparam name="T">The type of component to find.</typeparam>
            <param name="obj">The game object to search with.</param>
            <returns>True if a component has been found of type <typeparamref name="T"/> from <paramref name="obj"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsIndexNull``1(``0[],System.Int32)">
            <summary>
            Determines if the index is pointing to null in any way.
            </summary>
            <param name="array">The array to index with.</param>
            <param name="index">The index.</param>
            <returns>True if <paramref name="array"/> is null, if <paramref name="index"/> is out of range, or if the element is null.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return true.</param>
            <param name="max">The maximum value required to return true.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return true.</param>
            <param name="max">The maximum value required to return true.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsNullOrEmpty(System.Array)">
            <summary>
            Determines if the <see cref="T:System.Array"/> is null or empty.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to check for.</param>
            <returns>True if the <paramref name="array"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsNullOrEmpty(System.String)">
            <summary>
            Determines if the string is null or empty.
            </summary>
            <param name="str">The string to check for.</param>
            <returns>True if <paramref name="str"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for.</param>
            <returns>True if <paramref name="source"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.IsParent(KMSelectable)">
            <summary>
            Determines if the <see cref="T:KMSelectable"/> is a parent of another <see cref="T:KMSelectable"/>.
            </summary>
            <param name="kmSelectable">This is required to check the children field.</param>
            <returns>True if <see cref="F:KMSelectable.Children"/> is empty.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.RandomBoolean(System.Single)">
            <summary>
            Generates a random boolean.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>A random boolean, with probability based off of <paramref name="weighting"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.RandomBooleans(System.Int32,System.Single)">
            <summary>
            Generates a random set of booleans.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="length">The length of the array.</param>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>Random boolean array of length <paramref name="length"/>, with probability based off of <paramref name="weighting"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToNumber(System.Char)">
            <summary>
            Converts a character to a number.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedValueException"></exception>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToLower(System.Char)">
            <summary>
            Converts a character to lowercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as lowercase.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToUpper(System.Char)">
            <summary>
            Converts a character to uppercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as uppercase.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.DigitalRoot(System.Int32)">
            <summary>
            Gets the digital root of the number, which is obtained by repeatedly getting the sum of all digits until 1 digit remains.
            </summary>
            <param name="number">The number to get the digital root of.</param>
            <returns>The digital root of <paramref name="number"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.GetUpperBound(System.String)">
            <summary>
            Returns the last index of the string.
            </summary>
            <param name="str">The string to check length for.</param>
            <returns><see cref="P:System.String.Length"/> - 1</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.GetUpperBound``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last index of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check length for.</param>
            <returns><paramref name="source"/>.Count() - 1</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.LengthOrDefault(System.Array)">
            <summary>
            Returns the length of the array, or if null, the default value 0.
            </summary>
            <param name="array">The array to check its length.</param>
            <returns><paramref name="array"/>'s length, or 0.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.MemberCount``1">
            <summary>
            Counts the number of members in an enum.
            </summary>
            <typeparam name="T">The enum to check the length for.</typeparam>
            <returns>The number of members in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Modulo(System.Int32,System.Int32)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Modulo(System.Single,System.Single)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToNumbers``1(``0[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Parses each element of an array into a number. If it succeeds it returns the integer array, if it fails then it returns null.
            </summary>
            <param name="ts">The array to convert to an integer.</param>
            <param name="min">The minimum acceptable value of any given index. (inclusive)</param>
            <param name="max">The maximum acceptable value of any given index. (inclusive)</param>
            <param name="minLength">The minimum acceptable length of the array. (inclusive)</param>
            <param name="maxLength">The maximum acceptable length of the array. (inclusive)</param>
            <returns>The array as integers, or null if it fails.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Ranges(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random set of integers.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (exclusive)</param>
            <param name="length">The length of the array.</param>
            <returns>Random integer array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Ranges(System.Single,System.Single,System.Int32)">
            <summary>
            Generates a random set of floats.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (inclusive)</param>
            <param name="length">The length of the array.</param>
            <returns>Random float array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Base(System.String,System.String,System.String)">
            <summary>
            Converts any base number to any base.
            </summary>a
            <param name="value">The value to convert.</param>
            <param name="fromBaseChars">All of the base characters for the conversion from the base number, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <param name="toBaseChars">All of the base characters for the conversion to the base number, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCodingAndNobodyExplodes.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Base(System.String,System.Int32,System.Int32)">
            <summary>
            Converts any base number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="fromBaseNumber">Which base it currently is.</param>
            <param name="toBaseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.BaseToLong(System.String,System.Int32)">
            <summary>
            Converts any base number to any base-10.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base it currently is.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.LongToBase(System.Int64,System.Int32)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Form(System.String,System.Object[])">
            <summary>
            Formats the string. Shorthand for <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="str">The string to format. Typically with placeholders involving {0}, {1}, {2}...</param>
            <param name="args">All of the arguments to put into <paramref name="str"/>.</param>
            <returns>The formatted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToOrdinal(System.Int32)">
            <summary>
            Converts a number to the ordinal as <see cref="T:System.String"/>.
            </summary>
            <param name="i">The number to convert to an ordinal.</param>
            <returns><paramref name="i"/> as an ordinal. (<see cref="T:System.String"/>)</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.UnwrapToString(System.Object,System.Boolean,System.String)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or any other data and concatenates it into a string.
            </summary>
            <param name="item">The object to unwrap.</param>
            <param name="getVariables">Whether it should search recursively inside the variable and yield return the elements inside <paramref name="item"/>.</param>
            <param name="delimiter">The characters in-between each element.</param>
            <returns>A string consisting of all values from <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Modulo(System.Object,KeepCodingAndNobodyExplodes.BigInteger)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="item">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the element provided to the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/> and element.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index matches any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="indices">The indices to exclude from <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Include``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index does not match any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="indices">The indices to include in <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Indistinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, only allowing duplicated items.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter through.</param>
            <returns>A new instance of <paramref name="source"/> that only includes elements which are repeated in the array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the element provided to the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Append``1(``0[],``0)">
            <summary>
            Appends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.GetValues``1">
            <summary>
            Returns all elements of an enum as one array, in order.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The enum as an array, ordered by smallest value to largest.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Indistinct``1(``0[])">
            <summary>
            Filters an array into elements that exist multiple times in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="source"/>.</typeparam>
            <param name="source">The array to filter through.</param>
            <returns>A new array containing only duplicated items of <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.Prepend``1(``0[],``0)">
            <summary>
            Prepends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToTuple``1(``0)">
            <summary>
            Converts arguments to a new tuple.
            </summary>
            <typeparam name="T">The type of tuple.</typeparam>
            <param name="item1">The argument to pass into the tuple.</param>
            <returns>A new <see cref="T:KeepCodingAndNobodyExplodes.Tuple`1"/> containing <paramref name="item1"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToTuple``2(``0,``1)">
            <summary>
            Converts arguments to a new tuple.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCodingAndNobodyExplodes.Tuple`2"/> containing <paramref name="item1"/> and <paramref name="item2"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToTuple``3(``0,``1,``2)">
            <summary>
            Converts arguments to a new tuple.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <typeparam name="T3">The third type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <param name="item3">The third argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCodingAndNobodyExplodes.Tuple`3"/> containing <paramref name="item1"/>, <paramref name="item2"/>, and <paramref name="item3"/></returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Helper.ToTuple``4(``0,``1,``2,``3)">
            <summary>
            Converts arguments to a new tuple.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <typeparam name="T3">The third type of the tuple.</typeparam>
            <typeparam name="T4">The fourth type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <param name="item3">The third argument to pass into the tuple.</param>
            <param name="item4">The fourth argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCodingAndNobodyExplodes.Tuple`4"/> containing <paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, and <paramref name="item4"/></returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.ModInfo">
            <summary>
            Contains information about the mod's info, this class can be used to deserialize every mod's "modInfo.json".
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.Id">
            <value>
            Contains the ID of the mod, not to be mistaken with <see cref="P:KeepCodingAndNobodyExplodes.ModuleScript.ModuleId"/>.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.Title">
            <value>
            Contains the title of the mod.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.Author">
            <value>
            Contains the author of the mod.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.Description">
            <value>
            Contains the description of the mod.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.Version">
            <value>
            Contains the current version of the mod.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModInfo.UnityVersion">
            <summary>
            Contains the current unity version of the mod.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModInfo.Deserialize(System.String)">
            <summary>
            Deserializes a modInfo.json file.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <param name="path">The path of the file to deserialize.</param>
            <returns><paramref name="path"/> deserialized as <see cref="T:KeepCodingAndNobodyExplodes.ModInfo"/>.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.ModuleContainer">
            <summary>
            Container for both regular and needy modules.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleContainer.#ctor(KMBombModule,KMNeedyModule)">
            <summary>
            Encapsulates either a regular or needy module.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.ConstructorArgumentException"></exception>
            <param name="bombModule">The instance of a normal module.</param>
            <param name="needyModule">The instance of a needy module.</param>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.RequiresTimerVisibility">
            <value>
            Set to true to only allow this module to be placed on the same face as the timer. Useful when the rules involve the timer in some way (like the Big Button), but should be used sparingly as it limits generation possibilities.
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.ModuleDisplayName">
            <value>
            The nice display name shown to players. e.g. "The Button"
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.ModuleType">
            <value>
            The identifier for the module as referenced in missions. e.g. "BigButton" Also known as a "Module ID".
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.HandlePass">
            <value>
            Call this when the entire module has been solved.
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.HandleStrike">
            <value>
            Call this on any mistake that you want to cause a bomb strike.
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.GetRuleGenerationSeed">
            <value>
            Returns the random seed used to generate the rules for this game. Not currently used.
            </value>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.Regular">
            <value>
            Returns <see cref="T:KMBombModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.Needy">
            <value>
            Returns <see cref="T:KMNeedyModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleContainer.Module">
            <value>
            Returns <see cref="T:KMBombModule"/>, or if null, <see cref="T:KMNeedyModule"/>.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleContainer.OnActivate(System.Action)">
            <summary>
            Sets the action of OnActivate.
            </summary>
            <param name="action">The delegate to set.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.ModuleScript">
            <summary>
            Base class for regular and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.OnActivate">
            <summary>
            Called when the lights turn on.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.OnTimerTick">
            <summary>
            Called when the timer's seconds-digit changes.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.IsActive">
            <value>
            Determines whether the bomb is currently active, and the timer is ticking.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.IsEditor">
            <value>
            Determines whether it is running on Unity or in-game.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.IsSolved">
            <value>
            Determines if the module has been solved.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.IsStrike">
            <value>
            Determines if the module has been struck. Twitch Plays script will set this to false when a command is interrupted.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.IsNeedyActive">
            <value>
            Determines if the needy is active.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.ModuleId">
            <value>
            The Unique Id for this module of this type.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.TimeLeft">
            <value>
            The amount of time left on the bomb, in seconds, rounded down.
            </value>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.ModBundleName">
            <summary>
            The name of the bundle. This is required for the version number.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.Version">
            <value>
            The version number of the entire mod. Requires instance of <see cref="F:KeepCodingAndNobodyExplodes.ModuleScript.ModBundleName"/>.
            </value>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.ModuleScript.Module">
            <summary>
            Contains either <see cref="T:KMBombModule"/> or <see cref="T:KMNeedyModule"/>, and allows for running commands through context.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.TimeModeActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.TwitchPlaysActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.TwitchPlaysSkipTimeAllowed">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.TwitchShouldCancelCommand">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.ModuleScript.ZenModeActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Awake">
            <summary>
            This initalizes the module. If you have an Awake method, be sure to call <c>base.Awake()</c> as the first statement.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Assign(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <see cref="T:KMBombModule"/> or <see cref="T:KMNeedyModule"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException"></exception>
            <param name="onActivate">Called when the bomb has been activated and the timer has started.</param>
            <param name="onNeedyActivation">Called when the needy timer activates.</param>
            <param name="onNeedyDeactivation">Called when the needy gets solved or the bomb explodes.</param>
            <param name="onTimerExpired">Called when the timer of the needy runs out.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.ButtonEffect(KMSelectable,System.Single,System.Object[])">
            <summary>
            Handles typical button <see cref="F:KMSelectable.OnInteract"/> behaviour.
            </summary>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
            <param name="selectable">The selectable, which is used as a source for sound and bomb shake.</param>
            <param name="intensityModifier">The intensity of the bomb shaking.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/> or <see cref="T:KMSoundOverride.SoundEffect"/>. Any other type will throw an exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Dump(System.Boolean)">
            <summary>
            Dumps all information that it can find of the module using reflection. This should only be used to debug.
            </summary>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Solve(System.String[])">
            <summary>
            Solves the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Strike(System.String[])">
            <summary>
            Strikes the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Cache``1(System.Func{``0[]},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <remarks>
            <see cref="M:UnityEngine.GameObject.GetComponent``1"/> and <see cref="M:UnityEngine.GameObject.GetComponents``1"/> have their own implementations already, so use these functions instead for that purpose; 
            <seealso cref="M:KeepCodingAndNobodyExplodes.ModuleScript.Get``1(System.Boolean)"/>, <seealso cref="M:KeepCodingAndNobodyExplodes.ModuleScript.GetAll``1(System.Boolean)"/>
            </remarks>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The components specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Dump(System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Dump(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Get``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponent``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.GetAll``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponents``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnityComponentNotFoundException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Log(System.Object,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.Log(System.Object,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.PlaySound(UnityEngine.Transform,System.Object[])">
            <summary>
            Plays a sound.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/> or <see cref="T:KMSoundOverride.SoundEffect"/>. Any other type will throw an exception.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.ModuleScript.PlaySound(System.Object[])">
            <summary>
            Plays a sound, the sound source is the game object it is attached to.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.UnrecognizedTypeException"></exception>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/> or <see cref="T:KMSoundOverride.SoundEffect"/>. Any other type will throw an exception.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.PathManager">
            <summary>
            Allows loading external information stored on the module. Do not use this code on the Editor. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.PathManager.CombineMultiple(System.String[])">
            <summary>
            Combines multiple paths together.
            </summary>
            <param name="paths">The paths to combine with.</param>
            <returns>A single path consisting of the combined path of the array.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.PathManager.GetModInfo(System.String)">
            <summary>
            Gets the path and deserializes the modInfo.json located at every mod's root folder.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="bundleFileName">The name of the bundle assembly.</param>
            <returns>The version number of the mod.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.PathManager.GetPath(System.String)">
            <summary>
            Finds a path of a given file within each mod.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="fileName">The file name to search for.</param>
            <returns>The path to <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.PathManager.LoadLibrary(System.String,System.String)">
            <summary>
            Loads a library by searching for the bundle. Do not run this on the Editor.
            </summary>
            <remarks>
            If the library has already been loaded, then this method will prematurely halt.
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="bundleFileName">The name of the bundle file.</param>
            <param name="libraryFileName">The library's name, excluding the extension.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Routine">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine.#ctor(System.Func{System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine.Start(System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine.Restart">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine.RestartAll">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Routine`1">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`1.#ctor(System.Func{`0,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`1.Start(`0,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`1.Restart(`0)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`1.RestartAll(`0)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Routine`2">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`2.#ctor(System.Func{`0,`1,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`2.Start(`0,`1,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`2.Restart(`0,`1)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`2.RestartAll(`0,`1)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Routine`3">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`3.#ctor(System.Func{`0,`1,`2,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`3.Start(`0,`1,`2,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`3.Restart(`0,`1,`2)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`3.RestartAll(`0,`1,`2)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Routine`4">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`4.#ctor(System.Func{`0,`1,`2,`3,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`4.Start(`0,`1,`2,`3,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`4.Restart(`0,`1,`2,`3)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Routine`4.RestartAll(`0,`1,`2,`3)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.RoutineBase">
            <summary>
            Abstract class for the <see cref="T:KeepCodingAndNobodyExplodes.Routine"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.RoutineBase.Stop">
            <summary>
            Stops the first coroutine that was called, and removes it from the list of coroutines.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.RoutineBase.StopAll">
            <summary>
            Stops all instances of the coroutine, and clears the list of coroutines.
            </summary>
            <exception cref="T:KeepCodingAndNobodyExplodes.EmptyIteratorException"></exception>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.RoutineBase.IsRunning">
            <value>
            Determines whether it is currently running any coroutines.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.RoutineBase.Coroutines">
            <value>
            The list of all coroutines currently running.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.RoutineBase.MonoBehaviour">
            <value>
            The MonoBehaviour that is being used to start the coroutines.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.StructHelper">
            <summary>
            Allows you to modify colors' individual RGBA or vectors' XYZW components relatively and absolutely. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector2@,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and replaces the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector3@,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and replaces the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector4@,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and replaces the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector2,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and replaces the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector3,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and replaces the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Vector4,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and replaces the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Color32,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Color32,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Color,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Replace(UnityEngine.Color,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Takes the vector, and replaces the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Takes the vector, and replaces the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector4,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Takes the vector, and replaces the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector2@,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and replaces the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector3@,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and replaces the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Vector4@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and replaces the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Color32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Color32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.Add(UnityEngine.Color,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Sets the <see cref="P:UnityEngine.Renderer.material"/>'s color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Sets the <see cref="P:UnityEngine.Renderer.material"/>'s color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IntertwineColor(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IntertwineColor(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IsEqual(UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IsEqual(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IsAnyEqual(UnityEngine.Color32[],UnityEngine.Color32)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.StructHelper.IsAnyEqual(UnityEngine.Color[],UnityEngine.Color)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.TPScript`1">
            <summary>
            Base class for TwitchPlays support for regular and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchHelpMessage">
            <summary>
            The help message that gets sent when typing <c>!{0} help</c>.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.ProcessTwitchCommand(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <remarks>
            Anything that gets yield returned will be processed by Twitch Plays. This includes other <see cref="T:System.Collections.IEnumerable"/> methods, <see cref="T:KMSelectable"/>, an <see cref="T:System.Array"/> of <see cref="T:KMSelectable"/>, <see cref="T:System.String"/>, <c>true</c>, or <c>null</c>.
            </remarks>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle as requested by the user.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.TwitchHandleForcedSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TimeModeActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchPlaysActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchPlaysSkipTimeAllowed">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchShouldCancelCommand">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.ZenModeActive">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchAbandonModule">
            <summary>
            Declaring this field allows for Twitch Plays to inform the module that the bomb is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, therefore the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.TPScript`1.Module">
            <value>
            The instance of the module.
            </value>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.Strike">
            <summary>
            Yield return this to indicate that this command will cause a strike at some later point; all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.Solve">
            <summary>
            Yield return this to indicate that this command will solve the module at some later point; all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.UnsubmittablePenalty">
            <summary>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.TryCancelSequence">
            <summary>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be cancelled if a "!cancel" or "!stop" is issued mid-way through that sequence.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.Cancelled">
            <summary>
            Yield return this to indicate that you have stopped processing the command in response to the <see cref="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchShouldCancelCommand"/> bool being set to true.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.MultipleStrikes">
            <summary>
            Yield return this to indicate that the issued command is going to cause more than one strike, so should disable the internal strike tracker in order to avoid flooding the chat with "VoteNay Module {id} got a strike! +1 strike to {Nickname}" for as many strikes as will be awarded. This also disables the internal solve tracker as well. This allows for sending additional messages or continue processing commands regardless of the solve/strike state.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.EndMultipleStrikes">
            <summary>
            Yield return this to indicate that the strike tracker should be enabled. If any strikes were issued during the time it was disabled, they will be awarded and the routine stopped at that point, otherwise, it will just cancel the "VoteNay Module {id} got 0 strikes! +0 strike to {Nickname}" message that would otherwise be posted. Likewise, if the module was solved at the time this command is issued, the processing will be stopped as of that point as well.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.AutoSolve">
            <summary>
            Yield return this to indicate automatically solving the module, as if it threw an exception while solving.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.CancelDetonate">
            <summary>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.WaitingMusic">
            <summary>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.EndWaitingMusic">
            <summary>
            Yield return this to indicate stopping the waiting music mid-command.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.ToggleWaitingMusic">
            <summary>
            Yield return this to toggle the waiting music on and off mid-command.
            </summary>
        </member>
        <member name="F:KeepCodingAndNobodyExplodes.TPScript`1.HideCamera">
            <summary>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations, if it is expected that the camera/hud will get in the way.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.OnInteractSequence(KMSelectable[],System.Single,System.Int32[])">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>, waiting <paramref name="wait"/> seconds in-between each, and interrupting as soon as <see cref="P:KeepCodingAndNobodyExplodes.ModuleScript.IsStrike"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="indices">The indices to press within the array.</param>
            <param name="wait">The delay between each button press in seconds.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.IsMatch(System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the input string matches the regex of the pattern.
            </summary>
            <param name="input">The test string.</param>
            <param name="pattern">The regular expression.</param>
            <param name="lenient">Whether it should add the default <c>^\s* PATTERN \s*$</c> embeded into most regex usages for Twitch Plays.</param>
            <param name="options">Any additional options for regular expressions.</param>
            <returns>True if <paramref name="lenient"/> passes the test of the <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.Evaluate(System.Boolean,System.Object,System.Object)">
            <summary>
            Works as a ternary operator. Returns <paramref name="then"/> if <paramref name="condition"/> is true, otherwise <paramref name="otherwise"/>.
            </summary>
            <remarks>
            You can yield return this to send error messages or interactions by first checking for the condition.
            </remarks>
            <param name="condition">The boolean to check.</param>
            <param name="then">The output to return if <paramref name="condition"/> is true.</param>
            <param name="otherwise">The output to return if <paramref name="condition"/> is false.</param>
            <returns><paramref name="then"/> or <paramref name="otherwise"/>, depending on <paramref name="condition"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.StrikeMessage(System.String)">
            <summary>
            Yield return this to allow you to tell the user why they got a strike if it isn't clear.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield. Just know that you won't be able to clean up if you do your cancel this way, and there is a pending !cancel or !stop.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time, and any time during the entire duration, the command may cancel. Like "trycancel", you won't be able to clean up if you cancel this way. Also like "trycancel", <paramref name="message"/> is optional.
            </summary>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.SendToChat(System.String)">
            <summary>
            Yield return this to send a chat directly to twitch chat.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.SendToChatError(System.String)">
            <summary>
            Yield return this to send a message to the chat about why a users' command was invalid.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.SendDelayedMessage(System.Single,System.String)">
            <summary>
            Yield return this to send a message to chat after <paramref name="time"/> seconds.
            </summary>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.Detonate(System.Nullable{System.Single},System.String)">
            <summary>
            Yield return this to explode the bomb instantly. <paramref name="time"/> is specified in number of seconds before the bomb explodes. (Note, sending another detonate command will auto-cancel the previous one on the same module if it hasn't happened already.). <paramref name="message"/> is the message to send to chat upon detonation. Both of the parameters are optional.
            </summary>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.SkipTime(System.String)">
            <summary>
            Yield return this to try advancing the clock to the specified time. You must put the full time you wish to skip to, and this time either needs to be less than the current time, if in normal/time mode, or greater than the current time, if in zen mode. Example, if you wanted to set the clock to 5:24, then you do "skiptime 324" or "skiptime 5:24". You can target partway through the seconds, such as "skiptime 45.28", which would then set the clock to 45.28, provided that time has NOT gone by already. You must also declare the <see cref="F:KeepCodingAndNobodyExplodes.TPScript`1.TwitchPlaysSkipTimeAllowed"/> bool, and set it to true, for this function to work.
            </summary>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.AwardPoints(System.Int32)">
            <summary>
            Yield return this to award the user that sent the command points directly, this is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.TPScript`1.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved. The module must prevent any user from sending commands afterward in order for Twitch Plays to award points to the correct user. This is currently used by the Twin module when extra points must be given but the module is not solved immediately.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Tuple">
            <summary>
            An abstract type meant for the tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple.Item(System.Int32)">
            <summary>
            Indexable tuple, uses <see cref="P:KeepCodingAndNobodyExplodes.Tuple.ToArray"/> to use the appropriate index.
            </summary>
            <param name="i">The index to use.</param>
            <returns><see cref="P:KeepCodingAndNobodyExplodes.Tuple.ToArray"/>'s <paramref name="i"/>th element.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Tuple`1">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.#ctor(`0)">
            <summary>
            Creates a singleton tuple.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`1.Item(System.Int32)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`1.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`1.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCodingAndNobodyExplodes.Tuple`1"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.GetHashCode">
            <summary>
            Gets the hash code of <see cref="P:KeepCodingAndNobodyExplodes.Tuple`1.Item1"/>.
            </summary>
            <returns>The hash code of <see cref="P:KeepCodingAndNobodyExplodes.Tuple`1.Item1"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.ToString">
            <summary>
            Gets the item, and returns it as a string.
            </summary>
            <returns><see cref="P:KeepCodingAndNobodyExplodes.Tuple`1.Item1"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.op_Equality(KeepCodingAndNobodyExplodes.Tuple{`0},KeepCodingAndNobodyExplodes.Tuple{`0})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.Item1.Item1"/> and <paramref name="tupleB.Item1.Item1"/> are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`1.op_Inequality(KeepCodingAndNobodyExplodes.Tuple{`0},KeepCodingAndNobodyExplodes.Tuple{`0})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.Item1.Item1"/> and <paramref name="tupleB.Item1.Item1"/> are not equal.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Tuple`2">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.#ctor(`0,`1)">
            <summary>
            Creates a tuple of size 2.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`2.Item(System.Int32)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`2.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`2.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`2.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCodingAndNobodyExplodes.Tuple`2"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns><see cref="P:KeepCodingAndNobodyExplodes.Tuple`2.Item1"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.op_Equality(KeepCodingAndNobodyExplodes.Tuple{`0,`1},KeepCodingAndNobodyExplodes.Tuple{`0,`1})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`2.op_Inequality(KeepCodingAndNobodyExplodes.Tuple{`0,`1},KeepCodingAndNobodyExplodes.Tuple{`0,`1})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Tuple`3">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a tuple of size 3.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`3.Item(System.Int32)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`3.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`3.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`3.Item3">
            <value>
            The third item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`3.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCodingAndNobodyExplodes.Tuple`3"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns><see cref="P:KeepCodingAndNobodyExplodes.Tuple`3.Item1"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.op_Equality(KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2},KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`3.op_Inequality(KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2},KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Tuple`4">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Creates a tuple of size 4.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
            <param name="item4">The item to pass into the fourth property.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.Item(System.Int32)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCodingAndNobodyExplodes.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.Item3">
            <value>
            The third item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.Item4">
            <value>
            The fourth item of the tuple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Tuple`4.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCodingAndNobodyExplodes.Tuple`4"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns><see cref="P:KeepCodingAndNobodyExplodes.Tuple`4.Item1"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.op_Equality(KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2,`3},KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2,`3})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Tuple`4.op_Inequality(KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2,`3},KeepCodingAndNobodyExplodes.Tuple{`0,`1,`2,`3})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work.#ctor(System.Action,System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work`1">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`1.#ctor(System.Func{`0},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`1.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Work`1.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work`2">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`2.#ctor(System.Func{`0,`1},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`2.Start(`0)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Work`2.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work`3">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`3.#ctor(System.Func{`0,`1,`2},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`3.Start(`0,`1)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Work`3.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work`4">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`4.#ctor(System.Func{`0,`1,`2,`3},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`4.Start(`0,`1,`2)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Work`4.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.Work`5">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`5.#ctor(System.Func{`0,`1,`2,`3,`4},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.Work`5.Start(`0,`1,`2,`3)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.Work`5.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:KeepCodingAndNobodyExplodes.WorkBase">
            <summary>
            Abstract class for the <see cref="T:KeepCodingAndNobodyExplodes.Work"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WorkBase.Stop">
            <summary>
            Interrupts the thread.
            </summary>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.WorkBase.IsRunning">
            <value>
            Determines whether any thread in this class in running.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.WorkBase.AllowSimultaneousActive">
            <value>
            Determines whether it should skip on starting a thread if it doesn't allow multiple.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.WorkBase.MaximumThreadsActive">
            <value>
            Determines the maximum number of threads it allows to be running at once within this class. This will make the class wait until <see cref="P:KeepCodingAndNobodyExplodes.WorkBase.ThreadsActive"/> is strictly less than this value.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.WorkBase.ThreadsActive">
            <value>
            Counts the number of threads currently active within this class, and all of its overloads.
            </value>
        </member>
        <member name="P:KeepCodingAndNobodyExplodes.WorkBase.Thread">
            <value>
            The thread of the class.
            </value>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WorkBase.WaitForOtherThreads">
            <summary>
            Waits until it is allowed to run a thread.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:KeepCodingAndNobodyExplodes.WorkBase.ThreadsActive"/> is strictly less than <see cref="P:KeepCodingAndNobodyExplodes.WorkBase.MaximumThreadsActive"/>.</returns>
        </member>
        <member name="M:KeepCodingAndNobodyExplodes.WorkBase.WaitForOwnThread">
            <summary>
            Waits until its own thread is no longer running..
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:KeepCodingAndNobodyExplodes.WorkBase.IsRunning"/> is no longer true.</returns>
        </member>
    </members>
</doc>
